version: '3.8'

services:
  tests:
    build:
      context: .
      dockerfile: Dockerfile-postgresql
    command: >
      sh -c "
        rm -f /tmp/test_finished.lock &&
        sh /scripts/run_tests.sh &&
        touch /tmp/test_finished.lock
      "
    user: root
    env_file:
      - .env_postgresql
    volumes:
      - ./django:/property_rental
      - test-lock:/tmp
    restart: "no"

  postgresql:
    container_name: postgresql
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5433:5432"
    networks:
      - observability
    volumes:
      - ./volumes/postgresql_data:/var/lib/postgresql/data/
      - test-lock:/tmp
    env_file:
      - .env_postgresql
    depends_on:
      - tests
    restart: "no"
    entrypoint: ["sh", "-c", "while [ ! -f /tmp/test_finished.lock ]; do echo 'Aguardando testes...'; sleep 50; done; echo 'Testes concluídos, iniciando PostgreSQL' && exec docker-entrypoint.sh postgres"]

  rabbitmq:
    image: rabbitmq:management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - observability
    volumes:
      - test-lock:/tmp
    depends_on:
      - tests
    entrypoint: ["sh", "-c", "while [ ! -f /tmp/test_finished.lock ]; do echo 'Aguardando testes...'; sleep 50; done; echo 'Testes concluídos, iniciando Rabbitmq' && /usr/local/bin/docker-entrypoint.sh rabbitmq-server"]

  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
      - test-lock:/tmp
    ports:
      - "6380:6379"
    networks:
      - observability
    depends_on:
      - tests
    restart: "no"
    entrypoint: ["sh", "-c", "while [ ! -f /tmp/test_finished.lock ]; do echo 'Aguardando testes...'; sleep 50; done; echo 'Testes concluídos, iniciando Redis' && /usr/local/bin/docker-entrypoint.sh redis-server"]

  django:
    build:
      context: .
      dockerfile: Dockerfile-postgresql
    ports:
      - "8000:8000"
    volumes:
      - ./django:/property_rental
      - test-lock:/tmp
    command: >
      sh -c "
        sh /scripts/wait_for_db.sh &&
        sh /scripts/wait_for_services.sh  &&
        sh /scripts/collect_static.sh &&
        sh /scripts/migrate.sh &&
        sh /scripts/run_server.sh
      "
    user: root
    env_file:
      - .env_postgresql
    depends_on:
      - tests
      - postgresql
      - rabbitmq
      - redis
    networks:
      - observability
    restart: "no"

  celery:
    build:
      context: .
      dockerfile: Dockerfile-postgresql
    command: sh -c "/scripts/wait_for_services.sh celery -A property_rental worker --loglevel=info"
    env_file:
      - .env_postgresql
    volumes:
      - ./django:/property_rental
    depends_on:
      - tests
      - django
      - rabbitmq
      - redis
    user: root
    networks:
      - observability

  prometheus:
    image: prom/prometheus
    volumes:
      - ./scripts:/scripts
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - observability
    depends_on:
      - django
    restart: "unless-stopped"
    entrypoint: ["/bin/sh", "-c", "/scripts/wait_django.sh && /bin/prometheus --config.file=/etc/prometheus/prometheus.yml"]


  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - observability
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    restart: "unless-stopped"
    volumes:
      - ./scripts:/scripts
      - grafana-storage:/var/lib/grafana
    entrypoint: ["/bin/sh", "-c", "/scripts/wait_django.sh && /usr/share/grafana/bin/grafana-server"]

volumes:
  test-lock:
  redis-data:
  grafana-storage:

networks:
  observability:
    driver: bridge
